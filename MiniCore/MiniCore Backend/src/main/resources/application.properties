spring.application.name=MiniCore

# Configuración de MySQL local
spring.datasource.url=jdbc:mysql://localhost:3306/MiniCore
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Configuración de MySQL deployado
#spring.datasource.url=jdbc:mysql://${DB_HOST}:${DB_PORT}/${DB_NAME}
#spring.datasource.username=${DB_USER}
#spring.datasource.password=${DB_PASSWORD}
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Configuración de Hibernate (opcional, pero recomendable)
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
spring.jpa.properties.hibernate.format_sql=true

# Recurso Server: apunta al JWKS de tu realm
# application.properties
# 1) para validar el claim ?iss?:
spring.security.oauth2.resourceserver.jwt.issuer-uri = http://localhost:8080/realms/ProyectoFinal
# 2) para descargar las keys JWK desde dentro del contenedor:
spring.security.oauth2.resourceserver.jwt.jwk-set-uri = http://host.docker.internal:8080/realms/ProyectoFinal/protocol/openid-connect/certs
logging.level.org.springframework.security.oauth2=DEBUG
logging.level.org.springframework.security.oauth2.server.resource=DEBUG

# URL de tu Vault (dentro de Docker usar host.docker.internal)
spring.cloud.vault.uri=http://host.docker.internal:8200
spring.cloud.vault.token=myroot
spring.cloud.vault.scheme=http
# Deshabilita la lectura de kv-v1/v2 si no lo usas
spring.cloud.vault.kv.enabled=false

logging.level.com.example.MiniCore.Service=DEBUG
logging.level.com.example.MiniCore.Controller=DEBUG
logging.level.org.springframework.web.client.RestTemplate=DEBUG
logging.level.org.springframework.vault=TRACE